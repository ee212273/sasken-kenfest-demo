---
name: CICD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: dev-runner
    steps:
      # Checkout the code
      - uses: actions/checkout@v3

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: temurin
          cache: maven

      # Build the project with Maven
      - name: Build with Maven
        run: mvn package --file pom.xml

      # Upload the Maven artifact
      - uses: actions/upload-artifact@v4
        with:
          name: Githubactions-CICD
          path: target/*.jar

      # Install required packages (including unzip)
      - name: Install required packages
        run: sudo apt-get update && sudo apt-get install -y jq unzip

      # SonarQube Scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # SonarQube Quality Gate check
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Set up QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build Docker image
      - name: Build Docker Image
        run: |
          docker build -t boardgame-app:latest .

      # Perform Trivy image scan
      - name: Trivy Image Scan
        run: |
          trivy image --format table -o trivy-image-report.html boardgame-app:latest

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Push Docker image to Docker Hub
      - name: Push Docker Image
        run: |
          docker push boardgame-app:latest

      # Apply Kubernetes configurations
      - name: kubectl Action
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
      - run: |
          kubectl apply -f deployment-service.yaml -n webapps
          kubectl get svc -n webapps
